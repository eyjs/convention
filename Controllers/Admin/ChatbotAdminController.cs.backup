using Microsoft.AspNetCore.Mvc;
using LocalRAG.Services.Ai;
using LocalRAG.Models;

namespace LocalRAG.Controllers.Admin
{
    [ApiController]
    [Route("api/admin/chatbot")]
    public class ChatbotAdminController : ControllerBase
    {
        private readonly ILogger<ChatbotAdminController> _logger;
        private readonly LlmProviderManager _providerManager;

        public ChatbotAdminController(
            ILogger<ChatbotAdminController> logger,
            LlmProviderManager providerManager)
        {
            _logger = logger;
            _providerManager = providerManager;
        }

        // 현재 활성 Provider 조회
        [HttpGet("active-provider")]
        public async Task<IActionResult> GetActiveProvider()
        {
            try
            {
                var setting = await _providerManager.GetActiveSettingAsync();
                if (setting == null)
                {
                    return Ok(new { providerName = "none", message = "No active provider" });
                }

                return Ok(new
                {
                    id = setting.Id,
                    providerName = setting.ProviderName,
                    modelName = setting.ModelName,
                    baseUrl = setting.BaseUrl,
                    isActive = setting.IsActive,
                    updatedAt = setting.UpdatedAt ?? setting.CreatedAt
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to get active provider");
                return StatusCode(500, new { error = ex.Message });
            }
        }

        // 모든 Provider 목록 조회
        [HttpGet("providers")]
        public async Task<IActionResult> GetAllProviders()
        {
            try
            {
                var settings = await _providerManager.GetAllSettingsAsync();
                var response = settings.Select(s => new
                {
                    id = s.Id,
                    providerName = s.ProviderName,
                    modelName = s.ModelName,
                    baseUrl = s.BaseUrl,
                    hasApiKey = !string.IsNullOrEmpty(s.ApiKey),
                    isActive = s.IsActive,
                    createdAt = s.CreatedAt,
                    updatedAt = s.UpdatedAt
                });

                return Ok(response);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to get providers");
                return StatusCode(500, new { error = ex.Message });
            }
        }

        // Provider 추가
        [HttpPost("providers")]
        public async Task<IActionResult> CreateProvider([FromBody] CreateProviderRequest request)
        {
            try
            {
                var setting = new LlmSetting
                {
                    ProviderName = request.ProviderName,
                    ApiKey = request.ApiKey,
                    BaseUrl = request.BaseUrl,
                    ModelName = request.ModelName,
                    IsActive = false,
                    AdditionalSettings = request.AdditionalSettings
                };

                var created = await _providerManager.CreateSettingAsync(setting);
                return Ok(new { success = true, id = created.Id });
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { error = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to create provider");
                return StatusCode(500, new { error = ex.Message });
            }
        }

        // Provider 수정
        [HttpPut("providers/{id}")]
        public async Task<IActionResult> UpdateProvider(int id, [FromBody] UpdateProviderRequest request)
        {
            try
            {
                var setting = new LlmSetting
                {
                    ProviderName = request.ProviderName,
                    ApiKey = request.ApiKey,
                    BaseUrl = request.BaseUrl,
                    ModelName = request.ModelName,
                    IsActive = request.IsActive,
                    AdditionalSettings = request.AdditionalSettings
                };

                await _providerManager.UpdateSettingAsync(id, setting);
                return Ok(new { success = true });
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { error = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to update provider");
                return StatusCode(500, new { error = ex.Message });
            }
        }

        // Provider 활성화 (스왑)
        [HttpPost("providers/{id}/activate")]
        public async Task<IActionResult> ActivateProvider(int id)
        {
            try
            {
                var success = await _providerManager.ActivateProviderAsync(id);
                if (!success)
                {
                    return NotFound(new { error = "Provider not found" });
                }

                return Ok(new { success = true, message = "Provider activated successfully" });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to activate provider");
                return StatusCode(500, new { error = ex.Message });
            }
        }

        // Provider 삭제
        [HttpDelete("providers/{id}")]
        public async Task<IActionResult> DeleteProvider(int id)
        {
            try
            {
                var success = await _providerManager.DeleteSettingAsync(id);
                if (!success)
                {
                    return NotFound(new { error = "Provider not found" });
                }

                return Ok(new { success = true });
            }
            catch (InvalidOperationException ex)
            {
                return BadRequest(new { error = ex.Message });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to delete provider");
                return StatusCode(500, new { error = ex.Message });
            }
        }
    }

    public class CreateProviderRequest
    {
        public string ProviderName { get; set; } = string.Empty;
        public string? ApiKey { get; set; }
        public string? BaseUrl { get; set; }
        public string? ModelName { get; set; }
        public string? AdditionalSettings { get; set; }
    }

    public class UpdateProviderRequest
    {
        public string ProviderName { get; set; } = string.Empty;
        public string? ApiKey { get; set; }
        public string? BaseUrl { get; set; }
        public string? ModelName { get; set; }
        public bool IsActive { get; set; }
        public string? AdditionalSettings { get; set; }
    }
}
