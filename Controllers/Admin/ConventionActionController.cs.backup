using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using LocalRAG.Data;
using LocalRAG.Models;

namespace LocalRAG.Controllers.Admin;

[ApiController]
[Route("api/admin/actions")]
[Authorize] // SystemAdmin, ConventionAdmin 제한 제거
public class ConventionActionController : ControllerBase
{
    private readonly ConventionDbContext _context;
    private readonly ILogger<ConventionActionController> _logger;

    public ConventionActionController(
        ConventionDbContext context,
        ILogger<ConventionActionController> logger)
    {
        _context = context;
        _logger = logger;
    }

    [HttpPost]
    public async Task<ActionResult> CreateAction([FromBody] ConventionActionRequest request)
    {
        try
        {
            // 중복 체크 (같은 행사에서 같은 ActionType)
            var exists = await _context.ConventionActions
                .AnyAsync(a => a.ConventionId == request.ConventionId && a.ActionType == request.ActionType);

            if (exists)
                return BadRequest(new { message = "이미 동일한 액션 타입이 존재합니다." });

            var action = new ConventionAction
            {
                ConventionId = request.ConventionId,
                ActionType = request.ActionType,
                Title = request.Title,
                MapsTo = request.MapsTo,
                Deadline = request.Deadline,
                OrderNum = request.OrderNum,
                ConfigJson = request.ConfigJson,
                IsActive = request.IsActive,
                TemplateId = request.IsCustom ? null : request.TemplateId, // 커스텀이면 null
                CreatedAt = DateTime.UtcNow,
                UpdatedAt = DateTime.UtcNow
            };

            _context.ConventionActions.Add(action);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Created action {ActionType} for convention {ConventionId}", 
                action.ActionType, action.ConventionId);

            return Ok(new { id = action.Id, message = "액션이 생성되었습니다." });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to create action");
            return StatusCode(500, new { message = "액션 생성에 실패했습니다." });
        }
    }

    [HttpPut("{id}")]
    public async Task<ActionResult> UpdateAction(int id, [FromBody] ConventionActionRequest request)
    {
        try
        {
            var action = await _context.ConventionActions.FindAsync(id);
            if (action == null)
                return NotFound(new { message = "액션을 찾을 수 없습니다." });

            // 중복 체크 (자기 자신 제외)
            var exists = await _context.ConventionActions
                .AnyAsync(a => a.Id != id && 
                         a.ConventionId == request.ConventionId && 
                         a.ActionType == request.ActionType);

            if (exists)
                return BadRequest(new { message = "이미 동일한 액션 타입이 존재합니다." });

            action.ActionType = request.ActionType;
            action.Title = request.Title;
            action.MapsTo = request.MapsTo;
            action.Deadline = request.Deadline;
            action.OrderNum = request.OrderNum;
            action.ConfigJson = request.ConfigJson;
            action.IsActive = request.IsActive;
            action.TemplateId = request.IsCustom ? null : request.TemplateId;
            action.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            _logger.LogInformation("Updated action {ActionId}", id);

            return Ok(new { message = "액션이 수정되었습니다." });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to update action {ActionId}", id);
            return StatusCode(500, new { message = "액션 수정에 실패했습니다." });
        }
    }

    [HttpPut("{id}/toggle")]
    public async Task<ActionResult> ToggleAction(int id)
    {
        try
        {
            var action = await _context.ConventionActions.FindAsync(id);
            if (action == null)
                return NotFound(new { message = "액션을 찾을 수 없습니다." });

            action.IsActive = !action.IsActive;
            action.UpdatedAt = DateTime.UtcNow;

            await _context.SaveChangesAsync();

            return Ok(new { isActive = action.IsActive });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to toggle action {ActionId}", id);
            return StatusCode(500, new { message = "상태 변경에 실패했습니다." });
        }
    }

    [HttpDelete("{id}")]
    public async Task<ActionResult> DeleteAction(int id)
    {
        try
        {
            var action = await _context.ConventionActions
                .Include(a => a.GuestActionStatuses)
                .FirstOrDefaultAsync(a => a.Id == id);

            if (action == null)
                return NotFound(new { message = "액션을 찾을 수 없습니다." });

            // 관련된 GuestActionStatus도 함께 삭제
            _context.GuestActionStatuses.RemoveRange(action.GuestActionStatuses);
            _context.ConventionActions.Remove(action);

            await _context.SaveChangesAsync();

            _logger.LogInformation("Deleted action {ActionId}", id);

            return Ok(new { message = "액션이 삭제되었습니다." });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to delete action {ActionId}", id);
            return StatusCode(500, new { message = "액션 삭제에 실패했습니다." });
        }
    }
}

public class ConventionActionRequest
{
    public int ConventionId { get; set; }
    public string ActionType { get; set; } = string.Empty;
    public string Title { get; set; } = string.Empty;
    public string MapsTo { get; set; } = string.Empty;
    public DateTime? Deadline { get; set; }
    public int OrderNum { get; set; }
    public string? ConfigJson { get; set; }
    public bool IsActive { get; set; } = true;
    public bool IsCustom { get; set; } = false;
    public int? TemplateId { get; set; }
}
