using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using LocalRAG.Data;
using LocalRAG.Models.Existing;

namespace LocalRAG.Controllers;

[ApiController]
[Route("api/[controller]")]
public class SpecificDataController : ControllerBase
{
    private readonly SpecificDbContext _context;
    private readonly ILogger<SpecificDataController> _logger;

    public SpecificDataController(SpecificDbContext context, ILogger<SpecificDataController> logger)
    {
        _context = context;
        _logger = logger;
    }

    // 연결 테스트
    [HttpGet("test-connection")]
    public async Task<ActionResult<object>> TestConnection()
    {
        try
        {
            var canConnect = await _context.Database.CanConnectAsync();
            var dbName = _context.Database.GetDbConnection().Database;
            
            return Ok(new
            {
                CanConnect = canConnect,
                DatabaseName = dbName,
                ServerVersion = _context.Database.GetDbConnection().ServerVersion,
                ConnectionTime = DateTime.Now
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Database connection test failed");
            return BadRequest(new { Error = ex.Message });
        }
    }

    // 테이블 통계 정보
    [HttpGet("stats")]
    public async Task<ActionResult<object>> GetStats()
    {
        try
        {
            var stats = new
            {
                Members = new
                {
                    Total = await _context.Members.CountAsync(),
                    Active = await _context.Members.CountAsync(m => m.IsActive),
                    RecentJoins = await _context.Members.CountAsync(m => m.JoinDate >= DateTime.Now.AddDays(-30))
                },
                Items = new
                {
                    Total = await _context.Items.CountAsync(),
                    WithPrice = await _context.Items.CountAsync(i => i.Price > 0),
                    RecentlyAdded = await _context.Items.CountAsync(i => i.CreatedDate >= DateTime.Now.AddDays(-7))
                },
                Orders = new
                {
                    Total = await _context.CustomerOrders.CountAsync(),
                    TodayOrders = await _context.CustomerOrders.CountAsync(o => o.OrderDate.Date == DateTime.Today),
                    TotalAmount = await _context.CustomerOrders.SumAsync(o => o.TotalAmount)
                },
                Logs = new
                {
                    Total = await _context.ActivityLogs.CountAsync(),
                    Today = await _context.ActivityLogs.CountAsync(l => l.CreatedAt.Date == DateTime.Today),
                    LastHour = await _context.ActivityLogs.CountAsync(l => l.CreatedAt >= DateTime.Now.AddHours(-1))
                }
            };

            return Ok(stats);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to get database stats");
            return BadRequest(new { Error = ex.Message });
        }
    }

    // 회원 목록 조회
    [HttpGet("members")]
    public async Task<ActionResult<object>> GetMembers(
        [FromQuery] int page = 1, 
        [FromQuery] int size = 20,
        [FromQuery] bool? isActive = null,
        [FromQuery] string? search = null)
    {
        try
        {
            var query = _context.Members.AsQueryable();

            // 필터링
            if (isActive.HasValue)
                query = query.Where(m => m.IsActive == isActive.Value);

            if (!string.IsNullOrEmpty(search))
                query = query.Where(m => m.Name!.Contains(search) || m.Email!.Contains(search));

            // 페이징
            var skip = (page - 1) * size;
            var members = await query
                .OrderByDescending(m => m.JoinDate)
                .Skip(skip)
                .Take(size)
                .ToListAsync();

            var totalCount = await query.CountAsync();

            return Ok(new
            {
                Data = members,
                Page = page,
                Size = size,
                TotalCount = totalCount,
                TotalPages = (int)Math.Ceiling((double)totalCount / size),
                Filters = new { isActive, search }
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to get members");
            return BadRequest(new { Error = ex.Message });
        }
    }

    // 특정 회원 조회
    [HttpGet("members/{id}")]
    public async Task<ActionResult<Member>> GetMember(int id)
    {
        try
        {
            var member = await _context.Members.FindAsync(id);
            if (member == null)
                return NotFound(new { Message = $"Member with ID {id} not found" });

            return Ok(member);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to get member {MemberId}", id);
            return BadRequest(new { Error = ex.Message });
        }
    }

    // 커스텀 SQL 쿼리 실행 (읽기 전용)
    [HttpPost("execute-query")]
    public async Task<ActionResult<object>> ExecuteCustomQuery([FromBody] CustomQueryRequest request)
    {
        try
        {
            if (string.IsNullOrWhiteSpace(request.Query))
                return BadRequest(new { Error = "Query is required" });

            // 보안: SELECT 쿼리만 허용
            var trimmedQuery = request.Query.Trim().ToUpper();
            if (!trimmedQuery.StartsWith("SELECT"))
                return BadRequest(new { Error = "Only SELECT queries are allowed" });

            // 위험한 키워드 체크
            var dangerousKeywords = new[] { "DROP", "DELETE", "INSERT", "UPDATE", "ALTER", "CREATE", "EXEC", "EXECUTE" };
            if (dangerousKeywords.Any(keyword => trimmedQuery.Contains(keyword)))
                return BadRequest(new { Error = "Query contains potentially dangerous keywords" });

            var connection = _context.Database.GetDbConnection();
            await connection.OpenAsync();

            using var command = connection.CreateCommand();
            command.CommandText = request.Query;
            command.CommandTimeout = 30; // 30초 타임아웃

            using var reader = await command.ExecuteReaderAsync();
            var results = new List<Dictionary<string, object>>();
            var columnNames = new List<string>();

            // 컬럼 정보 수집
            for (int i = 0; i < reader.FieldCount; i++)
            {
                columnNames.Add(reader.GetName(i));
            }

            // 데이터 읽기 (최대 1000행까지만)
            var rowCount = 0;
            while (await reader.ReadAsync() && rowCount < 1000)
            {
                var row = new Dictionary<string, object>();
                for (int i = 0; i < reader.FieldCount; i++)
                {
                    var value = reader.IsDBNull(i) ? null : reader.GetValue(i);
                    row[reader.GetName(i)] = value;
                }
                results.Add(row);
                rowCount++;
            }

            return Ok(new
            {
                Query = request.Query,
                Columns = columnNames,
                RowCount = results.Count,
                MaxRowsReached = rowCount >= 1000,
                Data = results,
                ExecutedAt = DateTime.Now
            });
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to execute custom query");
            return BadRequest(new { Error = ex.Message });
        }
    }
}

// 커스텀 쿼리 요청 DTO
public record CustomQueryRequest(string Query);
