using Microsoft.EntityFrameworkCore;
using LocalRAG.Models.Existing;

namespace LocalRAG.Data;

public class ExistingDbContext : DbContext
{
    public ExistingDbContext(DbContextOptions<ExistingDbContext> options) : base(options)
    {
    }

    // 기존 테이블들을 DbSet으로 정의 (실제 테이블에 맞게 수정)
    public DbSet<ExistingUser> Users { get; set; }
    public DbSet<ExistingProduct> Products { get; set; }
    public DbSet<ExistingOrder> Orders { get; set; }
    public DbSet<ExistingCategory> Categories { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // 기존 테이블 관계 설정 (필요한 경우)
        modelBuilder.Entity<ExistingOrder>()
            .HasOne(o => o.User)
            .WithMany()
            .HasForeignKey(o => o.UserId)
            .OnDelete(DeleteBehavior.NoAction); // 기존 DB의 제약조건에 맞게 설정

        modelBuilder.Entity<ExistingProduct>()
            .HasOne<ExistingCategory>()
            .WithMany(c => c.Products)
            .HasForeignKey(p => p.CategoryId)
            .OnDelete(DeleteBehavior.NoAction);

        // 기존 테이블의 인덱스나 제약조건이 있다면 여기서 설정
        modelBuilder.Entity<ExistingUser>()
            .HasIndex(u => u.Email)
            .HasDatabaseName("IX_Users_Email");

        modelBuilder.Entity<ExistingProduct>()
            .HasIndex(p => p.ProductName)
            .HasDatabaseName("IX_Products_ProductName");
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        // 추가 설정이 필요한 경우
        if (!optionsBuilder.IsConfigured)
        {
            // 기본 설정이나 로깅 설정
            optionsBuilder.LogTo(Console.WriteLine, Microsoft.Extensions.Logging.LogLevel.Information);
        }
    }
}
