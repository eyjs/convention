using Microsoft.EntityFrameworkCore;
using LocalRAG.Models.Existing;

namespace LocalRAG.Data;

public class SpecificDbContext : DbContext
{
    public SpecificDbContext(DbContextOptions<SpecificDbContext> options) : base(options)
    {
    }

    // 사용할 특정 테이블들만 DbSet으로 정의
    public DbSet<Member> Members { get; set; }
    public DbSet<Item> Items { get; set; }
    public DbSet<CustomerOrder> CustomerOrders { get; set; }
    public DbSet<ActivityLog> ActivityLogs { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);

        // Member 엔티티 설정
        modelBuilder.Entity<Member>(entity =>
        {
            entity.HasKey(e => e.Id);
            
            // 인덱스 설정 (기존 DB에 있는 인덱스와 맞춤)
            entity.HasIndex(e => e.Email)
                .HasDatabaseName("IX_Members_Email");
            
            // 기본값 설정
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true);
            
            entity.Property(e => e.JoinDate)
                .HasDefaultValueSql("GETDATE()");
        });

        // Item 엔티티 설정
        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.Id);
            
            entity.HasIndex(e => e.Name)
                .HasDatabaseName("IX_Items_Name");
            
            entity.HasIndex(e => e.CategoryCode)
                .HasDatabaseName("IX_Items_CategoryCode");
            
            entity.Property(e => e.CreatedDate)
                .HasDefaultValueSql("GETDATE()");
        });

        // CustomerOrder 엔티티 설정
        modelBuilder.Entity<CustomerOrder>(entity =>
        {
            entity.HasKey(e => e.Id);
            
            // 외래키 관계 설정 (필요한 경우)
            entity.HasOne(e => e.Member)
                .WithMany()
                .HasForeignKey(e => e.MemberId)
                .OnDelete(DeleteBehavior.NoAction); // 기존 DB 제약조건에 맞춤
            
            entity.HasIndex(e => e.MemberId)
                .HasDatabaseName("IX_CustomerOrders_MemberId");
            
            entity.HasIndex(e => e.OrderNumber)
                .IsUnique()
                .HasDatabaseName("IX_CustomerOrders_OrderNumber");
            
            entity.Property(e => e.OrderDate)
                .HasDefaultValueSql("GETDATE()");
        });

        // ActivityLog 엔티티 설정 (읽기 전용)
        modelBuilder.Entity<ActivityLog>(entity =>
        {
            entity.HasKey(e => e.Id);
            
            entity.HasIndex(e => e.UserId)
                .HasDatabaseName("IX_ActivityLogs_UserId");
            
            entity.HasIndex(e => e.CreatedAt)
                .HasDatabaseName("IX_ActivityLogs_CreatedAt");
            
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("GETDATE()");
        });

        // 읽기 전용 뷰나 테이블 설정 (필요한 경우)
        // modelBuilder.Entity<ActivityLog>()
        //     .ToView("ActivityLogs"); // 뷰인 경우
    }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            // 쿼리 로깅 설정 (개발 환경에서만)
            optionsBuilder.LogTo(Console.WriteLine, 
                new[] { DbLoggerCategory.Database.Command.Name },
                Microsoft.Extensions.Logging.LogLevel.Information);
            
            // 민감한 데이터 로깅 설정 (개발 환경에서만)
            optionsBuilder.EnableSensitiveDataLogging();
        }
    }
}
