// <auto-generated />
using System;
using LocalRAG.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocalRAG.Migrations
{
    [DbContext(typeof(ConventionDbContext))]
    [Migration("20251024082931_AddUploadSystemFields")]
    partial class AddUploadSystemFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LocalRAG.DTOs.ScheduleModels.GuestScheduleTemplate", b =>
                {
                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GuestId", "ScheduleTemplateId");

                    b.HasIndex("ScheduleTemplateId");

                    b.ToTable("GuestScheduleTemplates");
                });

            modelBuilder.Entity("LocalRAG.DTOs.ScheduleModels.ScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleTemplateId")
                        .HasDatabaseName("IX_ScheduleItem_ScheduleTemplateId");

                    b.ToTable("ScheduleItems");
                });

            modelBuilder.Entity("LocalRAG.DTOs.ScheduleModels.ScheduleTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_ScheduleTemplate_ConventionId");

                    b.ToTable("ScheduleTemplates");
                });

            modelBuilder.Entity("LocalRAG.Entities.Action.ActionTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultConfigJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultRoute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<string>("RequiredFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ActionTemplates");
                });

            modelBuilder.Entity("LocalRAG.Entities.Action.ConventionAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfigJson")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IconClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("MapsTo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OrderNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_ConventionAction_ActionType");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_ConventionAction_ConventionId");

                    b.HasIndex("TemplateId");

                    b.HasIndex("ConventionId", "ActionType")
                        .IsUnique()
                        .HasDatabaseName("UQ_ConventionAction_ConventionId_ActionType");

                    b.ToTable("ConventionActions");
                });

            modelBuilder.Entity("LocalRAG.Entities.AttributeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_AttributeDefinition_ConventionId");

                    b.HasIndex("ConventionId", "AttributeKey")
                        .IsUnique()
                        .HasDatabaseName("UQ_AttributeDefinition_ConventionId_AttributeKey");

                    b.ToTable("AttributeDefinitions");
                });

            modelBuilder.Entity("LocalRAG.Entities.AttributeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_AttributeTemplate_ConventionId");

                    b.HasIndex("ConventionId", "AttributeKey")
                        .IsUnique()
                        .HasDatabaseName("UQ_AttributeTemplate_ConventionId_AttributeKey");

                    b.ToTable("AttributeTemplates");
                });

            modelBuilder.Entity("LocalRAG.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("NoticeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("NoticeId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("LocalRAG.Entities.Convention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompleteYn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConventionImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConventionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("DOMESTIC");

                    b.Property<string>("DeleteYn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("N");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDtm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("RenderType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("STANDARD");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThemePreset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionType")
                        .HasDatabaseName("IX_Convention_ConventionType");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_Convention_StartDate");

                    b.ToTable("Conventions");
                });

            modelBuilder.Entity("LocalRAG.Entities.ConventionChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_ChatMessage_ConventionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_ChatMessage_CreatedAt");

                    b.HasIndex("GuestId");

                    b.ToTable("ConventionChatMessages");
                });

            modelBuilder.Entity("LocalRAG.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MenuUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Feature_ConventionId");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("LocalRAG.Entities.FileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoardPostId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoticeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SavedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_FileAttachment_Category");

                    b.HasIndex("NoticeId")
                        .HasDatabaseName("IX_FileAttachment_NoticeId");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("LocalRAG.Entities.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Gallery_ConventionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Gallery_CreatedAt");

                    b.ToTable("Galleries");
                });

            modelBuilder.Entity("LocalRAG.Entities.GalleryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId")
                        .HasDatabaseName("IX_GalleryImage_GalleryId");

                    b.ToTable("GalleryImages");
                });

            modelBuilder.Entity("LocalRAG.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Affiliation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("CorpName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorpPart")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EnglishName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GroupName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRegisteredUser")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChatReadTimestamp")
                        .HasColumnType("datetime2");

                    b.Property<DateOnly?>("PassportExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VisaDocumentAttachmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessToken")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guest_AccessToken")
                        .HasFilter("[AccessToken] IS NOT NULL");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Guest_ConventionId");

                    b.HasIndex("GuestName")
                        .HasDatabaseName("IX_Guest_GuestName");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Guest_UserId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("LocalRAG.Entities.GuestActionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ConventionActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ResponseDataJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ConventionActionId")
                        .HasDatabaseName("IX_GuestActionStatus_ConventionActionId");

                    b.HasIndex("GuestId")
                        .HasDatabaseName("IX_GuestActionStatus_GuestId");

                    b.HasIndex("GuestId", "ConventionActionId")
                        .IsUnique()
                        .HasDatabaseName("UQ_GuestActionStatus_GuestId_ConventionActionId");

                    b.ToTable("GuestActionStatuses");
                });

            modelBuilder.Entity("LocalRAG.Entities.GuestAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId", "AttributeKey")
                        .IsUnique()
                        .HasDatabaseName("UQ_GuestAttributes_GuestId_AttributeKey");

                    b.ToTable("GuestAttributes");
                });

            modelBuilder.Entity("LocalRAG.Entities.LlmSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalSettings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApiKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("BaseUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ModelName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LlmSettings");
                });

            modelBuilder.Entity("LocalRAG.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteYn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDtm")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Menu_ConventionId");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("LocalRAG.Entities.Notice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("NoticeCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("IX_Notice_AuthorId");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Notice_ConventionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Notice_CreatedAt");

                    b.HasIndex("IsPinned")
                        .HasDatabaseName("IX_Notice_IsPinned");

                    b.HasIndex("NoticeCategoryId")
                        .HasDatabaseName("IX_Notice_NoticeCategoryId");

                    b.ToTable("Notices");
                });

            modelBuilder.Entity("LocalRAG.Entities.NoticeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_NoticeCategory_ConventionId");

                    b.HasIndex("ConventionId", "Name")
                        .HasDatabaseName("IX_NoticeCategory_ConventionId_Name");

                    b.ToTable("NoticeCategories");
                });

            modelBuilder.Entity("LocalRAG.Entities.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Owner_ConventionId");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("LocalRAG.Entities.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Schedule_ConventionId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("LocalRAG.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteYn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDtm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("IX_Section_MenuId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("LocalRAG.Entities.SurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionActionId")
                        .HasColumnType("int");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("ConventionActionId");

                    b.HasIndex("GuestId");

                    b.ToTable("SurveyResponses");
                });

            modelBuilder.Entity("LocalRAG.Entities.SurveyResponseAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyResponseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyResponseId");

                    b.ToTable("SurveyResponseAnswers");
                });

            modelBuilder.Entity("LocalRAG.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Guest");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("LoginId")
                        .IsUnique()
                        .HasDatabaseName("UQ_User_LoginId");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_User_Phone");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_User_Role");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LocalRAG.Entities.VectorDataEntry", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("EmbeddingData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MetadataJson")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId");

                    b.ToTable("VectorDataEntries");
                });

            modelBuilder.Entity("LocalRAG.Entities.VectorStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDtm")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_VectorStore_ConventionId");

                    b.HasIndex("SourceType")
                        .HasDatabaseName("IX_VectorStore_SourceType");

                    b.ToTable("VectorStores");
                });

            modelBuilder.Entity("LocalRAG.DTOs.ScheduleModels.GuestScheduleTemplate", b =>
                {
                    b.HasOne("LocalRAG.Entities.Guest", "Guest")
                        .WithMany("GuestScheduleTemplates")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.DTOs.ScheduleModels.ScheduleTemplate", "ScheduleTemplate")
                        .WithMany("GuestScheduleTemplates")
                        .HasForeignKey("ScheduleTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("ScheduleTemplate");
                });

            modelBuilder.Entity("LocalRAG.DTOs.ScheduleModels.ScheduleItem", b =>
                {
                    b.HasOne("LocalRAG.DTOs.ScheduleModels.ScheduleTemplate", "ScheduleTemplate")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleTemplate");
                });

            modelBuilder.Entity("LocalRAG.DTOs.ScheduleModels.ScheduleTemplate", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany("ScheduleTemplates")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.Action.ConventionAction", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.Action.ActionTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");

                    b.Navigation("Convention");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("LocalRAG.Entities.AttributeDefinition", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.AttributeTemplate", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.Comment", b =>
                {
                    b.HasOne("LocalRAG.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.Notice", "Notice")
                        .WithMany("Comments")
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("LocalRAG.Entities.ConventionChatMessage", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Convention");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("LocalRAG.Entities.Feature", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany("Features")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.FileAttachment", b =>
                {
                    b.HasOne("LocalRAG.Entities.Notice", "Notice")
                        .WithMany("Attachments")
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("LocalRAG.Entities.Gallery", b =>
                {
                    b.HasOne("LocalRAG.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.GalleryImage", b =>
                {
                    b.HasOne("LocalRAG.Entities.Gallery", "Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("LocalRAG.Entities.Guest", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany("Guests")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.User", "User")
                        .WithMany("Guests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Convention");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocalRAG.Entities.GuestActionStatus", b =>
                {
                    b.HasOne("LocalRAG.Entities.Action.ConventionAction", "ConventionAction")
                        .WithMany("GuestActionStatuses")
                        .HasForeignKey("ConventionActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.Guest", "Guest")
                        .WithMany("GuestActionStatuses")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConventionAction");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("LocalRAG.Entities.GuestAttribute", b =>
                {
                    b.HasOne("LocalRAG.Entities.Guest", "Guest")
                        .WithMany("GuestAttributes")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("LocalRAG.Entities.Menu", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany("Menus")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.Notice", b =>
                {
                    b.HasOne("LocalRAG.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.NoticeCategory", "NoticeCategory")
                        .WithMany("Notices")
                        .HasForeignKey("NoticeCategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Author");

                    b.Navigation("Convention");

                    b.Navigation("NoticeCategory");
                });

            modelBuilder.Entity("LocalRAG.Entities.NoticeCategory", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.Owner", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany("Owners")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Entities.Schedule", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", null)
                        .WithMany("Schedules")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalRAG.Entities.Section", b =>
                {
                    b.HasOne("LocalRAG.Entities.Menu", "Menu")
                        .WithMany("Sections")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("LocalRAG.Entities.SurveyResponse", b =>
                {
                    b.HasOne("LocalRAG.Entities.Action.ConventionAction", "ConventionAction")
                        .WithMany()
                        .HasForeignKey("ConventionActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Entities.Guest", "Guest")
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConventionAction");

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("LocalRAG.Entities.SurveyResponseAnswer", b =>
                {
                    b.HasOne("LocalRAG.Entities.SurveyResponse", "SurveyResponse")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyResponse");
                });

            modelBuilder.Entity("LocalRAG.Entities.VectorStore", b =>
                {
                    b.HasOne("LocalRAG.Entities.Convention", "Convention")
                        .WithMany("VectorStores")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.DTOs.ScheduleModels.ScheduleTemplate", b =>
                {
                    b.Navigation("GuestScheduleTemplates");

                    b.Navigation("ScheduleItems");
                });

            modelBuilder.Entity("LocalRAG.Entities.Action.ConventionAction", b =>
                {
                    b.Navigation("GuestActionStatuses");
                });

            modelBuilder.Entity("LocalRAG.Entities.Convention", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Guests");

                    b.Navigation("Menus");

                    b.Navigation("Owners");

                    b.Navigation("ScheduleTemplates");

                    b.Navigation("Schedules");

                    b.Navigation("VectorStores");
                });

            modelBuilder.Entity("LocalRAG.Entities.Gallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("LocalRAG.Entities.Guest", b =>
                {
                    b.Navigation("GuestActionStatuses");

                    b.Navigation("GuestAttributes");

                    b.Navigation("GuestScheduleTemplates");
                });

            modelBuilder.Entity("LocalRAG.Entities.Menu", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LocalRAG.Entities.Notice", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("LocalRAG.Entities.NoticeCategory", b =>
                {
                    b.Navigation("Notices");
                });

            modelBuilder.Entity("LocalRAG.Entities.SurveyResponse", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("LocalRAG.Entities.User", b =>
                {
                    b.Navigation("Guests");
                });
#pragma warning restore 612, 618
        }
    }
}
