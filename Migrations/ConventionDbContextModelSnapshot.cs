// <auto-generated />
using System;
using LocalRAG.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LocalRAG.Migrations
{
    [DbContext(typeof(ConventionDbContext))]
    partial class ConventionDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LocalRAG.Models.AttributeDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Options")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_AttributeDefinition_ConventionId");

                    b.HasIndex("ConventionId", "AttributeKey")
                        .IsUnique()
                        .HasDatabaseName("UQ_AttributeDefinition_ConventionId_AttributeKey");

                    b.ToTable("AttributeDefinitions", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.AttributeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeValues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_AttributeTemplate_ConventionId");

                    b.HasIndex("ConventionId", "AttributeKey")
                        .IsUnique()
                        .HasDatabaseName("UQ_AttributeTemplate_ConventionId_AttributeKey");

                    b.ToTable("AttributeTemplates", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Convention", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompleteYn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConventionImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConventionType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)")
                        .HasDefaultValue("DOMESTIC");

                    b.Property<string>("DeleteYn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("N");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegDtm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("RenderType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("STANDARD");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThemePreset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionType")
                        .HasDatabaseName("IX_Convention_ConventionType");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("IX_Convention_StartDate");

                    b.ToTable("Conventions", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("FeatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsEnabled")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Feature_ConventionId");

                    b.ToTable("Features", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.FileAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BoardPostId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NoticeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SavedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_FileAttachment_Category");

                    b.HasIndex("NoticeId")
                        .HasDatabaseName("IX_FileAttachment_NoticeId");

                    b.ToTable("FileAttachments", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Gallery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Gallery_ConventionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Gallery_CreatedAt");

                    b.ToTable("Galleries", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.GalleryImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GalleryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("GalleryId")
                        .HasDatabaseName("IX_GalleryImage_GalleryId");

                    b.ToTable("GalleryImages", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<string>("Affiliation")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("CorpName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CorpPart")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("GuestName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRegisteredUser")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidentNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccessToken")
                        .IsUnique()
                        .HasDatabaseName("UQ_Guest_AccessToken")
                        .HasFilter("[AccessToken] IS NOT NULL");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Guest_ConventionId");

                    b.HasIndex("GuestName")
                        .HasDatabaseName("IX_Guest_GuestName");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Guest_UserId");

                    b.ToTable("Guests", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.GuestAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttributeKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GuestId", "AttributeKey")
                        .IsUnique()
                        .HasDatabaseName("UQ_GuestAttributes_GuestId_AttributeKey");

                    b.ToTable("GuestAttributes", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.GuestScheduleTemplate", b =>
                {
                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("GuestId", "ScheduleTemplateId");

                    b.HasIndex("ScheduleTemplateId");

                    b.ToTable("GuestScheduleTemplates", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("DeleteYn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDtm")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Menu_ConventionId");

                    b.ToTable("Menus", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Notice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPinned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("IX_Notice_AuthorId");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Notice_ConventionId");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Notice_CreatedAt");

                    b.HasIndex("IsPinned")
                        .HasDatabaseName("IX_Notice_IsPinned");

                    b.ToTable("Notices", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Owner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Owner_ConventionId");

                    b.ToTable("Owners", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnType("time");

                    b.Property<string>("Group")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_Schedule_ConventionId");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.ScheduleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ScheduleTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("StartTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleTemplateId")
                        .HasDatabaseName("IX_ScheduleItem_ScheduleTemplateId");

                    b.ToTable("ScheduleItems", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.ScheduleTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_ScheduleTemplate_ConventionId");

                    b.ToTable("ScheduleTemplates", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeleteYn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDtm")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MenuId")
                        .HasDatabaseName("IX_Section_MenuId");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneVerified")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("RefreshTokenExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Guest");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("LoginId")
                        .IsUnique()
                        .HasDatabaseName("UQ_User_LoginId");

                    b.HasIndex("Phone")
                        .HasDatabaseName("IX_User_Phone");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_User_Role");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.VectorStore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ConventionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegDtm")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceTable")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ConventionId")
                        .HasDatabaseName("IX_VectorStore_ConventionId");

                    b.HasIndex("SourceType")
                        .HasDatabaseName("IX_VectorStore_SourceType");

                    b.ToTable("VectorStores", (string)null);
                });

            modelBuilder.Entity("LocalRAG.Models.AttributeDefinition", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.AttributeTemplate", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.Feature", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", null)
                        .WithMany("Features")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalRAG.Models.FileAttachment", b =>
                {
                    b.HasOne("LocalRAG.Models.Notice", "Notice")
                        .WithMany("Attachments")
                        .HasForeignKey("NoticeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Notice");
                });

            modelBuilder.Entity("LocalRAG.Models.Gallery", b =>
                {
                    b.HasOne("LocalRAG.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.GalleryImage", b =>
                {
                    b.HasOne("LocalRAG.Models.Gallery", "Gallery")
                        .WithMany("Images")
                        .HasForeignKey("GalleryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gallery");
                });

            modelBuilder.Entity("LocalRAG.Models.Guest", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany("Guests")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Models.User", "User")
                        .WithMany("Guests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Convention");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LocalRAG.Models.GuestAttribute", b =>
                {
                    b.HasOne("LocalRAG.Models.Guest", "Guest")
                        .WithMany("GuestAttributes")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guest");
                });

            modelBuilder.Entity("LocalRAG.Models.GuestScheduleTemplate", b =>
                {
                    b.HasOne("LocalRAG.Models.Guest", "Guest")
                        .WithMany("GuestScheduleTemplates")
                        .HasForeignKey("GuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LocalRAG.Models.ScheduleTemplate", "ScheduleTemplate")
                        .WithMany("GuestScheduleTemplates")
                        .HasForeignKey("ScheduleTemplateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Guest");

                    b.Navigation("ScheduleTemplate");
                });

            modelBuilder.Entity("LocalRAG.Models.Menu", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany("Menus")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.Notice", b =>
                {
                    b.HasOne("LocalRAG.Models.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany()
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.Owner", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany("Owners")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.Schedule", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", null)
                        .WithMany("Schedules")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LocalRAG.Models.ScheduleItem", b =>
                {
                    b.HasOne("LocalRAG.Models.ScheduleTemplate", "ScheduleTemplate")
                        .WithMany("ScheduleItems")
                        .HasForeignKey("ScheduleTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScheduleTemplate");
                });

            modelBuilder.Entity("LocalRAG.Models.ScheduleTemplate", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany("ScheduleTemplates")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.Section", b =>
                {
                    b.HasOne("LocalRAG.Models.Menu", "Menu")
                        .WithMany("Sections")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("LocalRAG.Models.VectorStore", b =>
                {
                    b.HasOne("LocalRAG.Models.Convention", "Convention")
                        .WithMany("VectorStores")
                        .HasForeignKey("ConventionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Convention");
                });

            modelBuilder.Entity("LocalRAG.Models.Convention", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Guests");

                    b.Navigation("Menus");

                    b.Navigation("Owners");

                    b.Navigation("ScheduleTemplates");

                    b.Navigation("Schedules");

                    b.Navigation("VectorStores");
                });

            modelBuilder.Entity("LocalRAG.Models.Gallery", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("LocalRAG.Models.Guest", b =>
                {
                    b.Navigation("GuestAttributes");

                    b.Navigation("GuestScheduleTemplates");
                });

            modelBuilder.Entity("LocalRAG.Models.Menu", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("LocalRAG.Models.Notice", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("LocalRAG.Models.ScheduleTemplate", b =>
                {
                    b.Navigation("GuestScheduleTemplates");

                    b.Navigation("ScheduleItems");
                });

            modelBuilder.Entity("LocalRAG.Models.User", b =>
                {
                    b.Navigation("Guests");
                });
#pragma warning restore 612, 618
        }
    }
}
